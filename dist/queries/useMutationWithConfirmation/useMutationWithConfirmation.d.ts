import { QueryAlertConfirmOptions } from "../../hooks/useQueryConfirmAlerts";
import { UseMutationOptions } from "@tanstack/react-query";
declare const useMutationWithConfirmation: <T extends UseMutationOptions<unknown, Error, void, unknown>>(mutation: T, options?: QueryAlertConfirmOptions, tKey?: string) => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    mutate: import("@tanstack/react-query").UseMutateFunction<unknown, Error, void, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    showConfirm: (payload: unknown) => void;
} | {
    data: undefined;
    variables: void;
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    mutate: import("@tanstack/react-query").UseMutateFunction<unknown, Error, void, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    showConfirm: (payload: unknown) => void;
} | {
    data: undefined;
    error: Error;
    variables: void;
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    mutate: import("@tanstack/react-query").UseMutateFunction<unknown, Error, void, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    showConfirm: (payload: unknown) => void;
} | {
    data: unknown;
    error: null;
    variables: void;
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    mutate: import("@tanstack/react-query").UseMutateFunction<unknown, Error, void, unknown>;
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    showConfirm: (payload: unknown) => void;
};
export default useMutationWithConfirmation;
